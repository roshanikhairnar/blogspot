// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/blogs"
	"entdemo/ent/user"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsCreate is the builder for creating a Blogs entity.
type BlogsCreate struct {
	config
	mutation *BlogsMutation
	hooks    []Hook
}

// SetBlogTitle sets the "blogTitle" field.
func (bc *BlogsCreate) SetBlogTitle(s string) *BlogsCreate {
	bc.mutation.SetBlogTitle(s)
	return bc
}

// SetNillableBlogTitle sets the "blogTitle" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableBlogTitle(s *string) *BlogsCreate {
	if s != nil {
		bc.SetBlogTitle(*s)
	}
	return bc
}

// SetBlogType sets the "blogType" field.
func (bc *BlogsCreate) SetBlogType(s string) *BlogsCreate {
	bc.mutation.SetBlogType(s)
	return bc
}

// SetNillableBlogType sets the "blogType" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableBlogType(s *string) *BlogsCreate {
	if s != nil {
		bc.SetBlogType(*s)
	}
	return bc
}

// SetBlogContent sets the "blogContent" field.
func (bc *BlogsCreate) SetBlogContent(s string) *BlogsCreate {
	bc.mutation.SetBlogContent(s)
	return bc
}

// SetNillableBlogContent sets the "blogContent" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableBlogContent(s *string) *BlogsCreate {
	if s != nil {
		bc.SetBlogContent(*s)
	}
	return bc
}

// SetBlogAuthor sets the "blogAuthor" field.
func (bc *BlogsCreate) SetBlogAuthor(s string) *BlogsCreate {
	bc.mutation.SetBlogAuthor(s)
	return bc
}

// SetNillableBlogAuthor sets the "blogAuthor" field if the given value is not nil.
func (bc *BlogsCreate) SetNillableBlogAuthor(s *string) *BlogsCreate {
	if s != nil {
		bc.SetBlogAuthor(*s)
	}
	return bc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bc *BlogsCreate) SetOwnerID(id int) *BlogsCreate {
	bc.mutation.SetOwnerID(id)
	return bc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (bc *BlogsCreate) SetNillableOwnerID(id *int) *BlogsCreate {
	if id != nil {
		bc = bc.SetOwnerID(*id)
	}
	return bc
}

// SetOwner sets the "owner" edge to the User entity.
func (bc *BlogsCreate) SetOwner(u *User) *BlogsCreate {
	return bc.SetOwnerID(u.ID)
}

// Mutation returns the BlogsMutation object of the builder.
func (bc *BlogsCreate) Mutation() *BlogsMutation {
	return bc.mutation
}

// Save creates the Blogs in the database.
func (bc *BlogsCreate) Save(ctx context.Context) (*Blogs, error) {
	return withHooks[*Blogs, BlogsMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlogsCreate) SaveX(ctx context.Context) *Blogs {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlogsCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlogsCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlogsCreate) check() error {
	return nil
}

func (bc *BlogsCreate) sqlSave(ctx context.Context) (*Blogs, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BlogsCreate) createSpec() (*Blogs, *sqlgraph.CreateSpec) {
	var (
		_node = &Blogs{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blogs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blogs.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.BlogTitle(); ok {
		_spec.SetField(blogs.FieldBlogTitle, field.TypeString, value)
		_node.BlogTitle = &value
	}
	if value, ok := bc.mutation.BlogType(); ok {
		_spec.SetField(blogs.FieldBlogType, field.TypeString, value)
		_node.BlogType = &value
	}
	if value, ok := bc.mutation.BlogContent(); ok {
		_spec.SetField(blogs.FieldBlogContent, field.TypeString, value)
		_node.BlogContent = &value
	}
	if value, ok := bc.mutation.BlogAuthor(); ok {
		_spec.SetField(blogs.FieldBlogAuthor, field.TypeString, value)
		_node.BlogAuthor = &value
	}
	if nodes := bc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogs.OwnerTable,
			Columns: []string{blogs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_blogs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogsCreateBulk is the builder for creating many Blogs entities in bulk.
type BlogsCreateBulk struct {
	config
	builders []*BlogsCreate
}

// Save creates the Blogs entities in the database.
func (bcb *BlogsCreateBulk) Save(ctx context.Context) ([]*Blogs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blogs, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlogsCreateBulk) SaveX(ctx context.Context) []*Blogs {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlogsCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlogsCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
