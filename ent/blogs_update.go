// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entdemo/ent/blogs"
	"entdemo/ent/predicate"
	"entdemo/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogsUpdate is the builder for updating Blogs entities.
type BlogsUpdate struct {
	config
	hooks    []Hook
	mutation *BlogsMutation
}

// Where appends a list predicates to the BlogsUpdate builder.
func (bu *BlogsUpdate) Where(ps ...predicate.Blogs) *BlogsUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBlogTitle sets the "blogTitle" field.
func (bu *BlogsUpdate) SetBlogTitle(s string) *BlogsUpdate {
	bu.mutation.SetBlogTitle(s)
	return bu
}

// SetNillableBlogTitle sets the "blogTitle" field if the given value is not nil.
func (bu *BlogsUpdate) SetNillableBlogTitle(s *string) *BlogsUpdate {
	if s != nil {
		bu.SetBlogTitle(*s)
	}
	return bu
}

// ClearBlogTitle clears the value of the "blogTitle" field.
func (bu *BlogsUpdate) ClearBlogTitle() *BlogsUpdate {
	bu.mutation.ClearBlogTitle()
	return bu
}

// SetBlogType sets the "blogType" field.
func (bu *BlogsUpdate) SetBlogType(s string) *BlogsUpdate {
	bu.mutation.SetBlogType(s)
	return bu
}

// SetNillableBlogType sets the "blogType" field if the given value is not nil.
func (bu *BlogsUpdate) SetNillableBlogType(s *string) *BlogsUpdate {
	if s != nil {
		bu.SetBlogType(*s)
	}
	return bu
}

// ClearBlogType clears the value of the "blogType" field.
func (bu *BlogsUpdate) ClearBlogType() *BlogsUpdate {
	bu.mutation.ClearBlogType()
	return bu
}

// SetBlogContent sets the "blogContent" field.
func (bu *BlogsUpdate) SetBlogContent(s string) *BlogsUpdate {
	bu.mutation.SetBlogContent(s)
	return bu
}

// SetNillableBlogContent sets the "blogContent" field if the given value is not nil.
func (bu *BlogsUpdate) SetNillableBlogContent(s *string) *BlogsUpdate {
	if s != nil {
		bu.SetBlogContent(*s)
	}
	return bu
}

// ClearBlogContent clears the value of the "blogContent" field.
func (bu *BlogsUpdate) ClearBlogContent() *BlogsUpdate {
	bu.mutation.ClearBlogContent()
	return bu
}

// SetBlogAuthor sets the "blogAuthor" field.
func (bu *BlogsUpdate) SetBlogAuthor(s string) *BlogsUpdate {
	bu.mutation.SetBlogAuthor(s)
	return bu
}

// SetNillableBlogAuthor sets the "blogAuthor" field if the given value is not nil.
func (bu *BlogsUpdate) SetNillableBlogAuthor(s *string) *BlogsUpdate {
	if s != nil {
		bu.SetBlogAuthor(*s)
	}
	return bu
}

// ClearBlogAuthor clears the value of the "blogAuthor" field.
func (bu *BlogsUpdate) ClearBlogAuthor() *BlogsUpdate {
	bu.mutation.ClearBlogAuthor()
	return bu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bu *BlogsUpdate) SetOwnerID(id int) *BlogsUpdate {
	bu.mutation.SetOwnerID(id)
	return bu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (bu *BlogsUpdate) SetNillableOwnerID(id *int) *BlogsUpdate {
	if id != nil {
		bu = bu.SetOwnerID(*id)
	}
	return bu
}

// SetOwner sets the "owner" edge to the User entity.
func (bu *BlogsUpdate) SetOwner(u *User) *BlogsUpdate {
	return bu.SetOwnerID(u.ID)
}

// Mutation returns the BlogsMutation object of the builder.
func (bu *BlogsUpdate) Mutation() *BlogsMutation {
	return bu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bu *BlogsUpdate) ClearOwner() *BlogsUpdate {
	bu.mutation.ClearOwner()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BlogsMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlogsUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlogsUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlogsUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BlogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blogs.Table,
			Columns: blogs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blogs.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BlogTitle(); ok {
		_spec.SetField(blogs.FieldBlogTitle, field.TypeString, value)
	}
	if bu.mutation.BlogTitleCleared() {
		_spec.ClearField(blogs.FieldBlogTitle, field.TypeString)
	}
	if value, ok := bu.mutation.BlogType(); ok {
		_spec.SetField(blogs.FieldBlogType, field.TypeString, value)
	}
	if bu.mutation.BlogTypeCleared() {
		_spec.ClearField(blogs.FieldBlogType, field.TypeString)
	}
	if value, ok := bu.mutation.BlogContent(); ok {
		_spec.SetField(blogs.FieldBlogContent, field.TypeString, value)
	}
	if bu.mutation.BlogContentCleared() {
		_spec.ClearField(blogs.FieldBlogContent, field.TypeString)
	}
	if value, ok := bu.mutation.BlogAuthor(); ok {
		_spec.SetField(blogs.FieldBlogAuthor, field.TypeString, value)
	}
	if bu.mutation.BlogAuthorCleared() {
		_spec.ClearField(blogs.FieldBlogAuthor, field.TypeString)
	}
	if bu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogs.OwnerTable,
			Columns: []string{blogs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogs.OwnerTable,
			Columns: []string{blogs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlogsUpdateOne is the builder for updating a single Blogs entity.
type BlogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogsMutation
}

// SetBlogTitle sets the "blogTitle" field.
func (buo *BlogsUpdateOne) SetBlogTitle(s string) *BlogsUpdateOne {
	buo.mutation.SetBlogTitle(s)
	return buo
}

// SetNillableBlogTitle sets the "blogTitle" field if the given value is not nil.
func (buo *BlogsUpdateOne) SetNillableBlogTitle(s *string) *BlogsUpdateOne {
	if s != nil {
		buo.SetBlogTitle(*s)
	}
	return buo
}

// ClearBlogTitle clears the value of the "blogTitle" field.
func (buo *BlogsUpdateOne) ClearBlogTitle() *BlogsUpdateOne {
	buo.mutation.ClearBlogTitle()
	return buo
}

// SetBlogType sets the "blogType" field.
func (buo *BlogsUpdateOne) SetBlogType(s string) *BlogsUpdateOne {
	buo.mutation.SetBlogType(s)
	return buo
}

// SetNillableBlogType sets the "blogType" field if the given value is not nil.
func (buo *BlogsUpdateOne) SetNillableBlogType(s *string) *BlogsUpdateOne {
	if s != nil {
		buo.SetBlogType(*s)
	}
	return buo
}

// ClearBlogType clears the value of the "blogType" field.
func (buo *BlogsUpdateOne) ClearBlogType() *BlogsUpdateOne {
	buo.mutation.ClearBlogType()
	return buo
}

// SetBlogContent sets the "blogContent" field.
func (buo *BlogsUpdateOne) SetBlogContent(s string) *BlogsUpdateOne {
	buo.mutation.SetBlogContent(s)
	return buo
}

// SetNillableBlogContent sets the "blogContent" field if the given value is not nil.
func (buo *BlogsUpdateOne) SetNillableBlogContent(s *string) *BlogsUpdateOne {
	if s != nil {
		buo.SetBlogContent(*s)
	}
	return buo
}

// ClearBlogContent clears the value of the "blogContent" field.
func (buo *BlogsUpdateOne) ClearBlogContent() *BlogsUpdateOne {
	buo.mutation.ClearBlogContent()
	return buo
}

// SetBlogAuthor sets the "blogAuthor" field.
func (buo *BlogsUpdateOne) SetBlogAuthor(s string) *BlogsUpdateOne {
	buo.mutation.SetBlogAuthor(s)
	return buo
}

// SetNillableBlogAuthor sets the "blogAuthor" field if the given value is not nil.
func (buo *BlogsUpdateOne) SetNillableBlogAuthor(s *string) *BlogsUpdateOne {
	if s != nil {
		buo.SetBlogAuthor(*s)
	}
	return buo
}

// ClearBlogAuthor clears the value of the "blogAuthor" field.
func (buo *BlogsUpdateOne) ClearBlogAuthor() *BlogsUpdateOne {
	buo.mutation.ClearBlogAuthor()
	return buo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (buo *BlogsUpdateOne) SetOwnerID(id int) *BlogsUpdateOne {
	buo.mutation.SetOwnerID(id)
	return buo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (buo *BlogsUpdateOne) SetNillableOwnerID(id *int) *BlogsUpdateOne {
	if id != nil {
		buo = buo.SetOwnerID(*id)
	}
	return buo
}

// SetOwner sets the "owner" edge to the User entity.
func (buo *BlogsUpdateOne) SetOwner(u *User) *BlogsUpdateOne {
	return buo.SetOwnerID(u.ID)
}

// Mutation returns the BlogsMutation object of the builder.
func (buo *BlogsUpdateOne) Mutation() *BlogsMutation {
	return buo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (buo *BlogsUpdateOne) ClearOwner() *BlogsUpdateOne {
	buo.mutation.ClearOwner()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlogsUpdateOne) Select(field string, fields ...string) *BlogsUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blogs entity.
func (buo *BlogsUpdateOne) Save(ctx context.Context) (*Blogs, error) {
	return withHooks[*Blogs, BlogsMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlogsUpdateOne) SaveX(ctx context.Context) *Blogs {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlogsUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlogsUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BlogsUpdateOne) sqlSave(ctx context.Context) (_node *Blogs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blogs.Table,
			Columns: blogs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blogs.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blogs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogs.FieldID)
		for _, f := range fields {
			if !blogs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BlogTitle(); ok {
		_spec.SetField(blogs.FieldBlogTitle, field.TypeString, value)
	}
	if buo.mutation.BlogTitleCleared() {
		_spec.ClearField(blogs.FieldBlogTitle, field.TypeString)
	}
	if value, ok := buo.mutation.BlogType(); ok {
		_spec.SetField(blogs.FieldBlogType, field.TypeString, value)
	}
	if buo.mutation.BlogTypeCleared() {
		_spec.ClearField(blogs.FieldBlogType, field.TypeString)
	}
	if value, ok := buo.mutation.BlogContent(); ok {
		_spec.SetField(blogs.FieldBlogContent, field.TypeString, value)
	}
	if buo.mutation.BlogContentCleared() {
		_spec.ClearField(blogs.FieldBlogContent, field.TypeString)
	}
	if value, ok := buo.mutation.BlogAuthor(); ok {
		_spec.SetField(blogs.FieldBlogAuthor, field.TypeString, value)
	}
	if buo.mutation.BlogAuthorCleared() {
		_spec.ClearField(blogs.FieldBlogAuthor, field.TypeString)
	}
	if buo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogs.OwnerTable,
			Columns: []string{blogs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogs.OwnerTable,
			Columns: []string{blogs.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Blogs{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
