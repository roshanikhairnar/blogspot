// Code generated by ent, DO NOT EDIT.

package blogs

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Blogs {
	return predicate.Blogs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Blogs {
	return predicate.Blogs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Blogs {
	return predicate.Blogs(sql.FieldLTE(FieldID, id))
}

// BlogTitle applies equality check predicate on the "blogTitle" field. It's identical to BlogTitleEQ.
func BlogTitle(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogTitle, v))
}

// BlogType applies equality check predicate on the "blogType" field. It's identical to BlogTypeEQ.
func BlogType(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogType, v))
}

// BlogContent applies equality check predicate on the "blogContent" field. It's identical to BlogContentEQ.
func BlogContent(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogContent, v))
}

// BlogAuthor applies equality check predicate on the "blogAuthor" field. It's identical to BlogAuthorEQ.
func BlogAuthor(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogAuthor, v))
}

// BlogTitleEQ applies the EQ predicate on the "blogTitle" field.
func BlogTitleEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogTitle, v))
}

// BlogTitleNEQ applies the NEQ predicate on the "blogTitle" field.
func BlogTitleNEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNEQ(FieldBlogTitle, v))
}

// BlogTitleIn applies the In predicate on the "blogTitle" field.
func BlogTitleIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldIn(FieldBlogTitle, vs...))
}

// BlogTitleNotIn applies the NotIn predicate on the "blogTitle" field.
func BlogTitleNotIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNotIn(FieldBlogTitle, vs...))
}

// BlogTitleGT applies the GT predicate on the "blogTitle" field.
func BlogTitleGT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGT(FieldBlogTitle, v))
}

// BlogTitleGTE applies the GTE predicate on the "blogTitle" field.
func BlogTitleGTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGTE(FieldBlogTitle, v))
}

// BlogTitleLT applies the LT predicate on the "blogTitle" field.
func BlogTitleLT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLT(FieldBlogTitle, v))
}

// BlogTitleLTE applies the LTE predicate on the "blogTitle" field.
func BlogTitleLTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLTE(FieldBlogTitle, v))
}

// BlogTitleContains applies the Contains predicate on the "blogTitle" field.
func BlogTitleContains(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContains(FieldBlogTitle, v))
}

// BlogTitleHasPrefix applies the HasPrefix predicate on the "blogTitle" field.
func BlogTitleHasPrefix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasPrefix(FieldBlogTitle, v))
}

// BlogTitleHasSuffix applies the HasSuffix predicate on the "blogTitle" field.
func BlogTitleHasSuffix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasSuffix(FieldBlogTitle, v))
}

// BlogTitleIsNil applies the IsNil predicate on the "blogTitle" field.
func BlogTitleIsNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldIsNull(FieldBlogTitle))
}

// BlogTitleNotNil applies the NotNil predicate on the "blogTitle" field.
func BlogTitleNotNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldNotNull(FieldBlogTitle))
}

// BlogTitleEqualFold applies the EqualFold predicate on the "blogTitle" field.
func BlogTitleEqualFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEqualFold(FieldBlogTitle, v))
}

// BlogTitleContainsFold applies the ContainsFold predicate on the "blogTitle" field.
func BlogTitleContainsFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContainsFold(FieldBlogTitle, v))
}

// BlogTypeEQ applies the EQ predicate on the "blogType" field.
func BlogTypeEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogType, v))
}

// BlogTypeNEQ applies the NEQ predicate on the "blogType" field.
func BlogTypeNEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNEQ(FieldBlogType, v))
}

// BlogTypeIn applies the In predicate on the "blogType" field.
func BlogTypeIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldIn(FieldBlogType, vs...))
}

// BlogTypeNotIn applies the NotIn predicate on the "blogType" field.
func BlogTypeNotIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNotIn(FieldBlogType, vs...))
}

// BlogTypeGT applies the GT predicate on the "blogType" field.
func BlogTypeGT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGT(FieldBlogType, v))
}

// BlogTypeGTE applies the GTE predicate on the "blogType" field.
func BlogTypeGTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGTE(FieldBlogType, v))
}

// BlogTypeLT applies the LT predicate on the "blogType" field.
func BlogTypeLT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLT(FieldBlogType, v))
}

// BlogTypeLTE applies the LTE predicate on the "blogType" field.
func BlogTypeLTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLTE(FieldBlogType, v))
}

// BlogTypeContains applies the Contains predicate on the "blogType" field.
func BlogTypeContains(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContains(FieldBlogType, v))
}

// BlogTypeHasPrefix applies the HasPrefix predicate on the "blogType" field.
func BlogTypeHasPrefix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasPrefix(FieldBlogType, v))
}

// BlogTypeHasSuffix applies the HasSuffix predicate on the "blogType" field.
func BlogTypeHasSuffix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasSuffix(FieldBlogType, v))
}

// BlogTypeIsNil applies the IsNil predicate on the "blogType" field.
func BlogTypeIsNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldIsNull(FieldBlogType))
}

// BlogTypeNotNil applies the NotNil predicate on the "blogType" field.
func BlogTypeNotNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldNotNull(FieldBlogType))
}

// BlogTypeEqualFold applies the EqualFold predicate on the "blogType" field.
func BlogTypeEqualFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEqualFold(FieldBlogType, v))
}

// BlogTypeContainsFold applies the ContainsFold predicate on the "blogType" field.
func BlogTypeContainsFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContainsFold(FieldBlogType, v))
}

// BlogContentEQ applies the EQ predicate on the "blogContent" field.
func BlogContentEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogContent, v))
}

// BlogContentNEQ applies the NEQ predicate on the "blogContent" field.
func BlogContentNEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNEQ(FieldBlogContent, v))
}

// BlogContentIn applies the In predicate on the "blogContent" field.
func BlogContentIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldIn(FieldBlogContent, vs...))
}

// BlogContentNotIn applies the NotIn predicate on the "blogContent" field.
func BlogContentNotIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNotIn(FieldBlogContent, vs...))
}

// BlogContentGT applies the GT predicate on the "blogContent" field.
func BlogContentGT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGT(FieldBlogContent, v))
}

// BlogContentGTE applies the GTE predicate on the "blogContent" field.
func BlogContentGTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGTE(FieldBlogContent, v))
}

// BlogContentLT applies the LT predicate on the "blogContent" field.
func BlogContentLT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLT(FieldBlogContent, v))
}

// BlogContentLTE applies the LTE predicate on the "blogContent" field.
func BlogContentLTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLTE(FieldBlogContent, v))
}

// BlogContentContains applies the Contains predicate on the "blogContent" field.
func BlogContentContains(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContains(FieldBlogContent, v))
}

// BlogContentHasPrefix applies the HasPrefix predicate on the "blogContent" field.
func BlogContentHasPrefix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasPrefix(FieldBlogContent, v))
}

// BlogContentHasSuffix applies the HasSuffix predicate on the "blogContent" field.
func BlogContentHasSuffix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasSuffix(FieldBlogContent, v))
}

// BlogContentIsNil applies the IsNil predicate on the "blogContent" field.
func BlogContentIsNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldIsNull(FieldBlogContent))
}

// BlogContentNotNil applies the NotNil predicate on the "blogContent" field.
func BlogContentNotNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldNotNull(FieldBlogContent))
}

// BlogContentEqualFold applies the EqualFold predicate on the "blogContent" field.
func BlogContentEqualFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEqualFold(FieldBlogContent, v))
}

// BlogContentContainsFold applies the ContainsFold predicate on the "blogContent" field.
func BlogContentContainsFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContainsFold(FieldBlogContent, v))
}

// BlogAuthorEQ applies the EQ predicate on the "blogAuthor" field.
func BlogAuthorEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEQ(FieldBlogAuthor, v))
}

// BlogAuthorNEQ applies the NEQ predicate on the "blogAuthor" field.
func BlogAuthorNEQ(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNEQ(FieldBlogAuthor, v))
}

// BlogAuthorIn applies the In predicate on the "blogAuthor" field.
func BlogAuthorIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldIn(FieldBlogAuthor, vs...))
}

// BlogAuthorNotIn applies the NotIn predicate on the "blogAuthor" field.
func BlogAuthorNotIn(vs ...string) predicate.Blogs {
	return predicate.Blogs(sql.FieldNotIn(FieldBlogAuthor, vs...))
}

// BlogAuthorGT applies the GT predicate on the "blogAuthor" field.
func BlogAuthorGT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGT(FieldBlogAuthor, v))
}

// BlogAuthorGTE applies the GTE predicate on the "blogAuthor" field.
func BlogAuthorGTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldGTE(FieldBlogAuthor, v))
}

// BlogAuthorLT applies the LT predicate on the "blogAuthor" field.
func BlogAuthorLT(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLT(FieldBlogAuthor, v))
}

// BlogAuthorLTE applies the LTE predicate on the "blogAuthor" field.
func BlogAuthorLTE(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldLTE(FieldBlogAuthor, v))
}

// BlogAuthorContains applies the Contains predicate on the "blogAuthor" field.
func BlogAuthorContains(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContains(FieldBlogAuthor, v))
}

// BlogAuthorHasPrefix applies the HasPrefix predicate on the "blogAuthor" field.
func BlogAuthorHasPrefix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasPrefix(FieldBlogAuthor, v))
}

// BlogAuthorHasSuffix applies the HasSuffix predicate on the "blogAuthor" field.
func BlogAuthorHasSuffix(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldHasSuffix(FieldBlogAuthor, v))
}

// BlogAuthorIsNil applies the IsNil predicate on the "blogAuthor" field.
func BlogAuthorIsNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldIsNull(FieldBlogAuthor))
}

// BlogAuthorNotNil applies the NotNil predicate on the "blogAuthor" field.
func BlogAuthorNotNil() predicate.Blogs {
	return predicate.Blogs(sql.FieldNotNull(FieldBlogAuthor))
}

// BlogAuthorEqualFold applies the EqualFold predicate on the "blogAuthor" field.
func BlogAuthorEqualFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldEqualFold(FieldBlogAuthor, v))
}

// BlogAuthorContainsFold applies the ContainsFold predicate on the "blogAuthor" field.
func BlogAuthorContainsFold(v string) predicate.Blogs {
	return predicate.Blogs(sql.FieldContainsFold(FieldBlogAuthor, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Blogs {
	return predicate.Blogs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Blogs {
	return predicate.Blogs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blogs) predicate.Blogs {
	return predicate.Blogs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blogs) predicate.Blogs {
	return predicate.Blogs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blogs) predicate.Blogs {
	return predicate.Blogs(func(s *sql.Selector) {
		p(s.Not())
	})
}
