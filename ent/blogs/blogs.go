// Code generated by ent, DO NOT EDIT.

package blogs

const (
	// Label holds the string label denoting the blogs type in the database.
	Label = "blogs"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlogTitle holds the string denoting the blogtitle field in the database.
	FieldBlogTitle = "blog_title"
	// FieldBlogType holds the string denoting the blogtype field in the database.
	FieldBlogType = "blog_type"
	// FieldBlogContent holds the string denoting the blogcontent field in the database.
	FieldBlogContent = "blog_content"
	// FieldBlogAuthor holds the string denoting the blogauthor field in the database.
	FieldBlogAuthor = "blog_author"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the blogs in the database.
	Table = "blogs"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "blogs"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_blogs"
)

// Columns holds all SQL columns for blogs fields.
var Columns = []string{
	FieldID,
	FieldBlogTitle,
	FieldBlogType,
	FieldBlogContent,
	FieldBlogAuthor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "blogs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_blogs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
